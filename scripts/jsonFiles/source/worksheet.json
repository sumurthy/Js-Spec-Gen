{
  "name": "Worksheet",
  "description": "An Excel worksheet is a grid of cells. It can contain data, tables, charts, etc.",
  "isCollection": false,
  "collectionOf": null,
  "restPath": null,
  "info": {
    "version": "1.1",
    "reqSet": "1.1",
    "addinTypes": [
      "Excel"
    ],
    "nameSpace": "Excel",
    "addinHosts": [
      "Task pane"
    ],
    "title": "Office JavaScript Add-in API",
    "description": "Office JavaScript Add-in API"
  },
  "properties": [
    {
      "name": "charts",
      "dataType": "ChartCollection",
      "description": "Returns collection of charts that are part of the worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "shapes",
      "dataType": "ShapeCollection",
      "description": "Returns the collection of all the Shape objects on the worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "beta",
      "isKey": null,
      "notes": null
    },
    {
      "name": "freezePanes",
      "dataType": "WorksheetFreezePanes",
      "description": "Gets an object that can be used to manipulate frozen panes on the worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.7",
      "isKey": null,
      "notes": null
    },
    {
      "name": "gridlines",
      "dataType": "bool",
      "description": "Gets or sets the worksheet's gridlines flag.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.8",
      "isKey": null,
      "notes": null
    },
    {
      "name": "showGridlines",
      "dataType": "bool",
      "description": "Gets or sets the worksheet's gridlines flag.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.8",
      "isKey": null,
      "notes": null
    },
    {
      "name": "headings",
      "dataType": "bool",
      "description": "Gets or sets the worksheet's headings flag.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.8",
      "isKey": null,
      "notes": null
    },
    {
      "name": "showHeadings",
      "dataType": "bool",
      "description": "Gets or sets the worksheet's headings flag.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.8",
      "isKey": null,
      "notes": null
    },
    {
      "name": "id",
      "dataType": "string",
      "description": "Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "position",
      "dataType": "int",
      "description": "The zero-based position of the worksheet within the workbook.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "name",
      "dataType": "string",
      "description": "The display name of the worksheet.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "tables",
      "dataType": "TableCollection",
      "description": "Collection of tables that are part of the worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "visibility",
      "dataType": "string",
      "description": "The Visibility of the worksheet.",
      "isReadOnly": false,
      "enumNameJs": "Excel.SheetVisibility",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "protection",
      "dataType": "WorksheetProtection",
      "description": "Returns sheet protection object for a worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "pivotTables",
      "dataType": "PivotTableCollection",
      "description": "Collection of PivotTables that are part of the worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "names",
      "dataType": "NamedItemCollection",
      "description": "Collection of names scoped to the current worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.4",
      "isKey": null,
      "notes": null
    },
    {
      "name": "tabColor",
      "dataType": "string",
      "description": "Gets or sets the worksheet tab color.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.7",
      "isKey": null,
      "notes": null
    },
    {
      "name": "pageLayout",
      "dataType": "PageLayout",
      "description": "Gets the PageLayout object of the worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "beta",
      "isKey": null,
      "notes": null
    },
    {
      "name": "standardWidth",
      "dataType": "double",
      "description": "Returns or sets the standard (default) width of all the columns in the worksheet.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.7",
      "isKey": null,
      "notes": null
    },
    {
      "name": "standardHeight",
      "dataType": "double",
      "description": "Returns the standard (default) height of all the rows in the worksheet, in points.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.7",
      "isKey": null,
      "notes": null
    },
    {
      "name": "horizontalPageBreaks",
      "dataType": "PageBreakCollection",
      "description": "Gets the horizontal page break collection for the worksheet. This collection only contains manual page breaks.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "beta",
      "isKey": null,
      "notes": null
    },
    {
      "name": "verticalPageBreaks",
      "dataType": "PageBreakCollection",
      "description": "Gets the vertical page break collection for the worksheet. This collection only contains manual page breaks.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "beta",
      "isKey": null,
      "notes": null
    },
    {
      "name": "enableCalculation",
      "dataType": "bool",
      "description": "Gets or sets the enableCalculation property of the worksheet.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "beta",
      "isKey": null,
      "notes": null
    },
    {
      "name": "autoFilter",
      "dataType": "AutoFilter",
      "description": "Represents the AutoFilter object of the worksheet. Read-Only.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "beta",
      "isKey": null,
      "notes": null
    }
  ],
  "methods": [
    {
      "name": "activate",
      "returnType": "void",
      "description": "Activate the worksheet in the Excel UI.",
      "syntax": "worksheetObject.activate();",
      "signature": "activate()",
      "restfulName": "activate",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "calculate",
      "returnType": "void",
      "description": "Calculates all cells on a worksheet.",
      "syntax": "worksheetObject.calculate(markAllDirty);",
      "signature": "calculate(markAllDirty: bool)",
      "restfulName": "calculate",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "markAllDirty",
          "dataType": "bool",
          "isCollection": false,
          "description": "True, to mark all as dirty.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.6"
    },
    {
      "name": "delete",
      "returnType": "void",
      "description": "Deletes the worksheet from the workbook.",
      "syntax": "worksheetObject.delete();",
      "signature": "delete()",
      "restfulName": "delete",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "findAll",
      "returnType": "RangeAreas",
      "description": "Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.",
      "syntax": "worksheetObject.findAll(text, criteria);",
      "signature": "findAll(text: string, criteria: WorksheetSearchCriteria)",
      "restfulName": "findAll",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "text",
          "dataType": "string",
          "isCollection": false,
          "description": "String to find.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "criteria",
          "dataType": "WorksheetSearchCriteria",
          "isCollection": false,
          "description": "Additional Criteria.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "beta"
    },
    {
      "name": "findAllOrNullObject",
      "returnType": "RangeAreas",
      "description": "Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.",
      "syntax": "worksheetObject.findAllOrNullObject(text, criteria);",
      "signature": "findAllOrNullObject(text: string, criteria: WorksheetSearchCriteria)",
      "restfulName": "findAllOrNullObject",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "text",
          "dataType": "string",
          "isCollection": false,
          "description": "String to find.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "criteria",
          "dataType": "WorksheetSearchCriteria",
          "isCollection": false,
          "description": "Additional Criteria.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "beta"
    },
    {
      "name": "replaceAll",
      "returnType": "int",
      "description": "Finds and replaces the given string based on the criteria specified within the current worksheet.",
      "syntax": "worksheetObject.replaceAll(text, replacement, criteria);",
      "signature": "replaceAll(text: string, replacement: string, criteria: ReplaceCriteria)",
      "restfulName": "replaceAll",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "text",
          "dataType": "string",
          "isCollection": false,
          "description": "String to find.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "replacement",
          "dataType": "string",
          "isCollection": false,
          "description": "String to replace the original with.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "criteria",
          "dataType": "ReplaceCriteria",
          "isCollection": false,
          "description": "Additional Replace Criteria.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "beta"
    },
    {
      "name": "getCell",
      "returnType": "Range",
      "description": "Gets the range object containing the single cell based on row and column numbers. The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.",
      "syntax": "worksheetObject.getCell(row, column);",
      "signature": "getCell(row: number, column: number)",
      "restfulName": "Cell",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "row",
          "dataType": "number",
          "isCollection": false,
          "description": "The row number of the cell to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "column",
          "dataType": "number",
          "isCollection": false,
          "description": "the column number of the cell to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getRange",
      "returnType": "Range",
      "description": "Gets the range object, representing a single rectangular block of cells, specified by the address or name.",
      "syntax": "worksheetObject.getRange(address);",
      "signature": "getRange(address: string)",
      "restfulName": "Range",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "address",
          "dataType": "string",
          "isCollection": false,
          "description": "Optional. The string representing the address or name of the range. For example, \"A1:B2\". If not specified, the entire worksheet range is returned.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getRanges",
      "returnType": "RangeAreas",
      "description": "Gets the RangeAreas object, representing one or more blocks of rectangular ranges, specified by the address or name.",
      "syntax": "worksheetObject.getRanges(address);",
      "signature": "getRanges(address: string)",
      "restfulName": "Ranges",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "address",
          "dataType": "string",
          "isCollection": false,
          "description": "Optional. A string containing the comma-separated addresses or names of the individual ranges. For example, \"A1:B2, A5:B5\". If not specified, an RangeArea object for the entire worksheet is returned.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "beta"
    },
    {
      "name": "getRangeByIndexes",
      "returnType": "Range",
      "description": "Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.",
      "syntax": "worksheetObject.getRangeByIndexes(startRow, startColumn, rowCount, columnCount);",
      "signature": "getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number)",
      "restfulName": "RangeByIndexes",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "startRow",
          "dataType": "number",
          "isCollection": false,
          "description": "Start row (zero-indexed).",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "startColumn",
          "dataType": "number",
          "isCollection": false,
          "description": "Start column (zero-indexed).",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "rowCount",
          "dataType": "number",
          "isCollection": false,
          "description": "Number of rows to include in the range.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "columnCount",
          "dataType": "number",
          "isCollection": false,
          "description": "Number of columns to include in the range.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.7"
    },
    {
      "name": "getPrevious",
      "returnType": "Worksheet",
      "description": "Gets the worksheet that precedes this one. If there are no previous worksheets, this method will throw an error.",
      "syntax": "worksheetObject.getPrevious(visibleOnly);",
      "signature": "getPrevious(visibleOnly: bool)",
      "restfulName": "Previous",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "visibleOnly",
          "dataType": "bool",
          "isCollection": false,
          "description": "Optional. If true, considers only visible worksheets, skipping over any hidden ones.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.5"
    },
    {
      "name": "getPreviousOrNullObject",
      "returnType": "Worksheet",
      "description": "Gets the worksheet that precedes this one. If there are no previous worksheets, this method will return a null objet.",
      "syntax": "worksheetObject.getPreviousOrNullObject(visibleOnly);",
      "signature": "getPreviousOrNullObject(visibleOnly: bool)",
      "restfulName": "PreviousOrNullObject",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "visibleOnly",
          "dataType": "bool",
          "isCollection": false,
          "description": "Optional. If true, considers only visible worksheets, skipping over any hidden ones.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.5"
    },
    {
      "name": "getNext",
      "returnType": "Worksheet",
      "description": "Gets the worksheet that follows this one. If there are no worksheets following this one, this method will throw an error.",
      "syntax": "worksheetObject.getNext(visibleOnly);",
      "signature": "getNext(visibleOnly: bool)",
      "restfulName": "Next",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "visibleOnly",
          "dataType": "bool",
          "isCollection": false,
          "description": "Optional. If true, considers only visible worksheets, skipping over any hidden ones.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.5"
    },
    {
      "name": "getNextOrNullObject",
      "returnType": "Worksheet",
      "description": "Gets the worksheet that follows this one. If there are no worksheets following this one, this method will return a null object.",
      "syntax": "worksheetObject.getNextOrNullObject(visibleOnly);",
      "signature": "getNextOrNullObject(visibleOnly: bool)",
      "restfulName": "NextOrNullObject",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "visibleOnly",
          "dataType": "bool",
          "isCollection": false,
          "description": "Optional. If true, considers only visible worksheets, skipping over any hidden ones.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.5"
    },
    {
      "name": "getUsedRange",
      "returnType": "Range",
      "description": "The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).",
      "syntax": "worksheetObject.getUsedRange(valuesOnly);",
      "signature": "getUsedRange(valuesOnly: [ApiSet(Version)",
      "restfulName": "UsedRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "valuesOnly",
          "dataType": "[ApiSet(Version",
          "isCollection": false,
          "description": "Optional. If true, considers only cells with values as used cells (ignoring formatting).",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getUsedRangeOrNullObject",
      "returnType": "Range",
      "description": "The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.",
      "syntax": "worksheetObject.getUsedRangeOrNullObject(valuesOnly);",
      "signature": "getUsedRangeOrNullObject(valuesOnly: bool)",
      "restfulName": "UsedRangeOrNullObject",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "valuesOnly",
          "dataType": "bool",
          "isCollection": false,
          "description": "Optional. Considers only cells with values as used cells.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.4"
    },
    {
      "name": "copy",
      "returnType": "Worksheet",
      "description": "Copy a worksheet and place it at the specified position. Return the copied worksheet.",
      "syntax": "worksheetObject.copy(positionType, relativeTo);",
      "signature": "copy(positionType: WorksheetPositionType, relativeTo: Worksheet)",
      "restfulName": "copy",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "positionType",
          "dataType": "WorksheetPositionType",
          "isCollection": false,
          "description": "Optional.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "relativeTo",
          "dataType": "Worksheet",
          "isCollection": false,
          "description": "Optional.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.7"
    }
  ]
}