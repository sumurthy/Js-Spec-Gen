{
  "name": "Range",
  "description": "Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc.",
  "isCollection": false,
  "collectionOf": null,
  "restPath": null,
  "info": {
    "version": "1.1",
    "reqSet": "1.1",
    "addinTypes": [
      "Excel"
    ],
    "nameSpace": "Excel",
    "addinHosts": [
      "Task pane"
    ],
    "title": "Office JavaScript Add-in API",
    "description": "Office JavaScript Add-in API"
  },
  "properties": [
    {
      "name": "address",
      "dataType": "string",
      "description": "Represents the range reference in A1-style. Address value will contain the Sheet reference (e.g. Sheet1!A1:B4).",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "addressLocal",
      "dataType": "string",
      "description": "Represents range reference for the specified range in the language of the user.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "cellCount",
      "dataType": "int",
      "description": "Number of cells in the range. This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647).",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "columnCount",
      "dataType": "int",
      "description": "Represents the total number of columns in the range.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "columnIndex",
      "dataType": "int",
      "description": "Represents the column number of the first cell in the range. Zero-indexed.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "conditionalFormats",
      "dataType": "ConditionalFormatCollection",
      "description": "Collection of ConditionalFormats that intersect the range.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.6",
      "isKey": null,
      "notes": null
    },
    {
      "name": "valueTypes",
      "dataType": "string",
      "description": "Represents the type of data of each cell.",
      "isReadOnly": true,
      "enumNameJs": "Excel.RangeValueType",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "format",
      "dataType": "RangeFormat",
      "description": "Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "formulas",
      "dataType": "object[][]",
      "description": "Represents the formula in A1-style notation.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "formulasLocal",
      "dataType": "object[][]",
      "description": "Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English \"=SUM(A1, 1.5)\" formula would become \"=SUMME(A1; 1,5)\" in German.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "formulasR1C1",
      "dataType": "object[][]",
      "description": "Represents the formula in R1C1-style notation.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "hidden",
      "dataType": "bool",
      "description": "Represents if all cells of the current range are hidden.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "rowHidden",
      "dataType": "bool",
      "description": "Represents if all rows of the current range are hidden.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "columnHidden",
      "dataType": "bool",
      "description": "Represents if all columns of the current range are hidden.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "numberFormat",
      "dataType": "object[][]",
      "description": "Represents Excel's number format code for the given cell.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "rowCount",
      "dataType": "int",
      "description": "Returns the total number of rows in the range.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "rowIndex",
      "dataType": "int",
      "description": "Returns the row number of the first cell in the range. Zero-indexed.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "text",
      "dataType": "object[][]",
      "description": "Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "values",
      "dataType": "object[][]",
      "description": "Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "worksheet",
      "dataType": "Worksheet",
      "description": "The worksheet containing the current range.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "sort",
      "dataType": "RangeSort",
      "description": "Represents the range sort of the current range.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    }
  ],
  "methods": [
    {
      "name": "calculate",
      "returnType": "void",
      "description": "Calculates a range of cells on a worksheet.",
      "syntax": "rangeObject.calculate();",
      "signature": "calculate()",
      "restfulName": "calculate",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.6"
    },
    {
      "name": "clear",
      "returnType": "void",
      "description": "Clear range values, format, fill, border, etc.",
      "syntax": "rangeObject.clear(applyTo);",
      "signature": "clear(applyTo: string)",
      "restfulName": "clear",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "applyTo",
          "dataType": "string",
          "isCollection": false,
          "description": "Determines the type of clear action.",
          "isRequired": false,
          "enumNameJs": "Excel.ClearApplyTo",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "delete",
      "returnType": "void",
      "description": "Deletes the cells associated with the range.",
      "syntax": "rangeObject.delete(shift);",
      "signature": "delete(shift: string)",
      "restfulName": "delete",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "shift",
          "dataType": "string",
          "isCollection": false,
          "description": "Specifies which way to shift the cells.",
          "isRequired": true,
          "enumNameJs": "Excel.DeleteShiftDirection",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getEntireColumn",
      "returnType": "Range",
      "description": "Gets an object that represents the entire column of the range (for example, if the current range represents cells \"B4:E11\", it's `getEntireColumn` is a range that represents columns \"B:E\").",
      "syntax": "rangeObject.getEntireColumn();",
      "signature": "getEntireColumn()",
      "restfulName": "EntireColumn",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getEntireRow",
      "returnType": "Range",
      "description": "Gets an object that represents the entire row of the range (for example, if the current range represents cells \"B4:E11\", it's `GetEntireRow` is a range that represents rows \"4:11\").",
      "syntax": "rangeObject.getEntireRow();",
      "signature": "getEntireRow()",
      "restfulName": "EntireRow",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getBoundingRect",
      "returnType": "Range",
      "description": "Gets the smallest range object that encompasses the given ranges. For example, the GetBoundingRect of \"B2:C5\" and \"D10:E15\" is \"B2:E16\".",
      "syntax": "rangeObject.getBoundingRect(anotherRange);",
      "signature": "getBoundingRect(anotherRange: Range or string)",
      "restfulName": "BoundingRect",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "anotherRange",
          "dataType": "Range or string",
          "isCollection": false,
          "description": "The range object or address or range name.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getCell",
      "returnType": "Range",
      "description": "Gets the range object containing the single cell based on row and column numbers. The cell can be outside the bounds of its parent range, so long as it's stays within the worksheet grid. The returned cell is located relative to the top left cell of the range.",
      "syntax": "rangeObject.getCell(row, column);",
      "signature": "getCell(row: number, column: number)",
      "restfulName": "Cell",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "row",
          "dataType": "number",
          "isCollection": false,
          "description": "Row number of the cell to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "column",
          "dataType": "number",
          "isCollection": false,
          "description": "Column number of the cell to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getColumn",
      "returnType": "Range",
      "description": "Gets a column contained in the range.",
      "syntax": "rangeObject.getColumn(column);",
      "signature": "getColumn(column: number)",
      "restfulName": "Column",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "column",
          "dataType": "number",
          "isCollection": false,
          "description": "Column number of the range to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getColumnsAfter",
      "returnType": "Range",
      "description": "Gets a certain number of columns to the right of the current Range object.",
      "syntax": "rangeObject.getColumnsAfter(count);",
      "signature": "getColumnsAfter(count: number)",
      "restfulName": "ColumnsAfter",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "count",
          "dataType": "number",
          "isCollection": false,
          "description": "The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getColumnsBefore",
      "returnType": "Range",
      "description": "Gets a certain number of columns to the left of the current Range object.",
      "syntax": "rangeObject.getColumnsBefore(count);",
      "signature": "getColumnsBefore(count: number)",
      "restfulName": "ColumnsBefore",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "count",
          "dataType": "number",
          "isCollection": false,
          "description": "The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getResizedRange",
      "returnType": "Range",
      "description": "Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.",
      "syntax": "rangeObject.getResizedRange(deltaRows, deltaColumns);",
      "signature": "getResizedRange(deltaRows: number, deltaColumns: number)",
      "restfulName": "ResizedRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "deltaRows",
          "dataType": "number",
          "isCollection": false,
          "description": "The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "deltaColumns",
          "dataType": "number",
          "isCollection": false,
          "description": "The number of columnsby which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getIntersection",
      "returnType": "Range",
      "description": "Gets the range object that represents the rectangular intersection of the given ranges.",
      "syntax": "rangeObject.getIntersection(anotherRange);",
      "signature": "getIntersection(anotherRange: Range or string)",
      "restfulName": "Intersection",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "anotherRange",
          "dataType": "Range or string",
          "isCollection": false,
          "description": "The range object or range address that will be used to determine the intersection of ranges.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getIntersectionOrNullObject",
      "returnType": "Range",
      "description": "Gets the range object that represents the rectangular intersection of the given ranges. If no intersection is found, will return a null object.",
      "syntax": "rangeObject.getIntersectionOrNullObject(anotherRange);",
      "signature": "getIntersectionOrNullObject(anotherRange: Range or string)",
      "restfulName": "IntersectionOrNullObject",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "anotherRange",
          "dataType": "Range or string",
          "isCollection": false,
          "description": "The range object or range address that will be used to determine the intersection of ranges.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.4"
    },
    {
      "name": "getLastCell",
      "returnType": "Range",
      "description": "Gets the last cell within the range. For example, the last cell of \"B2:D5\" is \"D5\".",
      "syntax": "rangeObject.getLastCell();",
      "signature": "getLastCell()",
      "restfulName": "LastCell",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getLastColumn",
      "returnType": "Range",
      "description": "Gets the last column within the range. For example, the last column of \"B2:D5\" is \"D2:D5\".",
      "syntax": "rangeObject.getLastColumn();",
      "signature": "getLastColumn()",
      "restfulName": "LastColumn",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getLastRow",
      "returnType": "Range",
      "description": "Gets the last row within the range. For example, the last row of \"B2:D5\" is \"B5:D5\".",
      "syntax": "rangeObject.getLastRow();",
      "signature": "getLastRow()",
      "restfulName": "LastRow",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getOffsetRange",
      "returnType": "Range",
      "description": "Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.",
      "syntax": "rangeObject.getOffsetRange(rowOffset, columnOffset);",
      "signature": "getOffsetRange(rowOffset: number, columnOffset: number)",
      "restfulName": "OffsetRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "rowOffset",
          "dataType": "number",
          "isCollection": false,
          "description": "The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "columnOffset",
          "dataType": "number",
          "isCollection": false,
          "description": "The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getRow",
      "returnType": "Range",
      "description": "Gets a row contained in the range.",
      "syntax": "rangeObject.getRow(row);",
      "signature": "getRow(row: number)",
      "restfulName": "Row",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "row",
          "dataType": "number",
          "isCollection": false,
          "description": "Row number of the range to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getRowsAbove",
      "returnType": "Range",
      "description": "Gets a certain number of rows above the current Range object.",
      "syntax": "rangeObject.getRowsAbove(count);",
      "signature": "getRowsAbove(count: number)",
      "restfulName": "RowsAbove",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "count",
          "dataType": "number",
          "isCollection": false,
          "description": "The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getRowsBelow",
      "returnType": "Range",
      "description": "Gets a certain number of rows below the current Range object.",
      "syntax": "rangeObject.getRowsBelow(count);",
      "signature": "getRowsBelow(count: number)",
      "restfulName": "RowsBelow",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "count",
          "dataType": "number",
          "isCollection": false,
          "description": "The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "insert",
      "returnType": "Range",
      "description": "Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.",
      "syntax": "rangeObject.insert(shift);",
      "signature": "insert(shift: string)",
      "restfulName": "insert",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "shift",
          "dataType": "string",
          "isCollection": false,
          "description": "Specifies which way to shift the cells.",
          "isRequired": true,
          "enumNameJs": "Excel.InsertShiftDirection",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "merge",
      "returnType": "void",
      "description": "Merge the range cells into one region in the worksheet.",
      "syntax": "rangeObject.merge(across);",
      "signature": "merge(across: bool)",
      "restfulName": "merge",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "across",
          "dataType": "bool",
          "isCollection": false,
          "description": "Set true to merge cells in each row of the specified range as separate merged cells. The default value is false.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "unmerge",
      "returnType": "void",
      "description": "Unmerge the range cells into separate cells.",
      "syntax": "rangeObject.unmerge();",
      "signature": "unmerge()",
      "restfulName": "unmerge",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.2"
    },
    {
      "name": "select",
      "returnType": "void",
      "description": "Selects the specified range in the Excel UI.",
      "syntax": "rangeObject.select();",
      "signature": "select()",
      "restfulName": "select",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getUsedRange",
      "returnType": "Range",
      "description": "Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.",
      "syntax": "rangeObject.getUsedRange(valuesOnly);",
      "signature": "getUsedRange(valuesOnly: bool)",
      "restfulName": "UsedRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "valuesOnly",
          "dataType": "bool",
          "isCollection": false,
          "description": "Considers only cells with values as used cells.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getUsedRangeOrNullObject",
      "returnType": "Range",
      "description": "Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.",
      "syntax": "rangeObject.getUsedRangeOrNullObject(valuesOnly);",
      "signature": "getUsedRangeOrNullObject(valuesOnly: bool)",
      "restfulName": "UsedRangeOrNullObject",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "valuesOnly",
          "dataType": "bool",
          "isCollection": false,
          "description": "Considers only cells with values as used cells.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.4"
    },
    {
      "name": "getVisibleView",
      "returnType": "RangeView",
      "description": "Represents the visible rows of the current range.",
      "syntax": "rangeObject.getVisibleView();",
      "signature": "getVisibleView()",
      "restfulName": "VisibleView",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.3"
    }
  ]
}